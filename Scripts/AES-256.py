import numpy as np

################################################################################################################
# FUNCTION DEFINITION                                                                                          #
################################################################################################################

# The algorithm for this gmul function is:
#   0. Initialise product with 0. Prepare an eight-time loop
#       1. If the LSB of b is set product = product XOR a
#       2. If the MSB of a is set a = a << 1 and a = a XOR 0x11b. Otherwise, just shift a one bit to the left
#       3. Shift b one bit to the right

# Multiply a & b in finite field
def gmul(a, b):
    i = 0
    product = 0
    for i in range(8):
        if ((b & 1) == 1):
            product ^= a
        if ((a & 0x80) == 0x80):
            a = a << 1
            a = a ^ 0x11b
        else:
            a = a << 1
        b = b >> 1

    return int(product)

# XOR two matrix with the same dimension
def MatrixXOR(a, b):
    c = []
    for i in range(len(a)):
        for j in range(len(b)):
            c[i][j] = a[i][j] ^ b[i][j]
    return c

# Shift row
def ShiftRow(a):
    a[1][0], a[1][1], a[1][2], a[1][3] = a[1][3], a[1][0], a[1][1], a[1][2]
    a[2][0], a[2][1], a[2][2], a[2][3] = a[2][2], a[2][3], a[2][0], a[2][1]
    a[3][0], a[3][1], a[3][2], a[3][3] = a[3][1], a[3][2], a[3][3], a[3][0]
    return a

# Rotate word one bit to the left
def RotWord(a):
    a[0], a[1], a[2], a[3] = a[3], a[0], a[1], a[2]
    return a 

# Mix Columns
def MixColumn(matrix):
    # Iterate through rows
    for i in range(len(MixColumnMatrix)):
        # Iterate through columns
        for j in range(len(matrix[0])):
            # Iterate through rows
            for k in range(len(matrix)):
                temp_a = int(gmul(MixColumnMatrix[i][k], matrix[k][j]))
                temp_b = int(result[i][j])
                temp = temp_a ^ temp_b
                result[i][j].append(temp)
    return result

# Subtitute a word
def SubWord(a):
    for i in range(len(a)):
        x = (a[i] & 0xF0) >> 4
        y = a[i] & 0x0F
        a[i] = SubBox[x][y]
    return a

# XOR two words
def XORWord(a, b):
    for i in range(len(a)):
        a[i] = a[i] ^ b[i]
    return a

# Key schedule routine
# Generates a set of 15 round keys using in encryption and decryption processes.
def KeySchedule(key):
    

################################################################################################################
# CONSTANTS DEFINITION                                                                                         #
################################################################################################################

SubBox =   [[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
            [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
            [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
            [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
            [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
            [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
            [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
            [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
            [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
            [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
            [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
            [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
            [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
            [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
            [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
            [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]]

MixColumnMatrix =  [[0x02, 0x03, 0x01, 0x01],
                    [0x01, 0x02, 0x03, 0x01],
                    [0x01, 0x01, 0x02, 0x03],
                    [0x03, 0x01, 0x01, 0x02]]

PlainText = [[0x35, 0x75, 0x38, 0x78], 
             [0x2F, 0x41, 0x25, 0x44], 
             [0x2A, 0x47, 0x2D, 0x4B], 
             [0x61, 0x50, 0x64, 0x53]]

CipherKey = [[0x4D, 0x63, 0x51, 0x66], 
             [0x54, 0x6A, 0x57, 0x6E], 
             [0x5A, 0x72, 0x34, 0x75], 
             [0x37, 0x78, 0x21, 0x41], 
             [0x25, 0x44, 0x2A, 0x47], 
             [0x2D, 0x4B, 0x61, 0x4E], 
             [0x64, 0x52, 0x67, 0x55], 
             [0x6B, 0x58, 0x70, 0x32]]

RoundConstant = [[0x01, 0x00, 0x00, 0x00],
                 [0x02, 0x00, 0x00, 0x00],
                 [0x04, 0x00, 0x00, 0x00],
                 [0x08, 0x00, 0x00, 0x00],
                 [0x10, 0x00, 0x00, 0x00],
                 [0x20, 0x00, 0x00, 0x00],
                 [0x40, 0x00, 0x00, 0x00]]



# # Test KeySchedule Function
print(KeySchedule(CipherKey))
# temp = KeySchedule(CipherKey)
# for k in range(60):
#     for i in range(4):
#         for j in range(4):
#             print(hex(int(temp[k][i][j])), " ", end="")
#         print("")
#     print("")
